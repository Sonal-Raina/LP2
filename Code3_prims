/*            PRIM's ALGORITHM

    |0| ------2------|1|------3------|2|
     |              / |             / 
     |            /   |           /   
     |          /     |         /
     6        8       5       7
     |      /         |     /
     |    /           |   /
     |  /             | /
    |3|              |4|
*/


#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n, m;
    cout<<"\nEnter the number of nodes: ";
    cin>>n; //n->no. of vertices
    cout<<"\nEnter the number of edges: ";
    cin>>m; //m->no. of edges
    vector<pair<int, int>>adj[n];
 //pair->{vertex, weight}
    
    int x, y, z;
    for(int i=0;i<m;++i)
    {
        cout<<"\nEnter the vertex: ";
        cin>>x;
        cout<<
"\nEnter the adjacent vertex: "
;
        cin>>y;
        cout<<
"\nEnter the weight of the edge btw the parent and adjacent vertex: "
;
        cin>>z;
        adj[x].push_back(make_pair(y, z));
        adj[y].push_back(make_pair(x, z));
    }
    
    int parent[n];
 //to store the parent node of the edges
    int key[n];
 //to store the minimum weight
    bool mstSet[n];
 //to keep track of the vertices used

    for(int i=0;i<n;++i)
    {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    priority_queue<pair<int, int>, vector<
pair
<int, int>>>p;
    key[0] = 0;
    parent[0] = -1;
    p.push({0, 0});

    while(!p.empty())
    {
        int u = p.top().second;
        p.pop();
        mstSet[u] = true;

        for (auto it:adj[u])
        {
            int v = it.first;
            int weight = it.second;
            if(mstSet[v] == false && weight
 < 
key[v])
            {
                parent[v] = u;
                key[v] = weight;
                p.push({key[v], v});
            }
        } 
    }
 
    int wt_sum = 0;
    for(int i=0;i<n;++i)
    {
        wt_sum += key[i];
    }
   
    cout<<"\n PATH\t\tWEIGHT\n";
    for(int i=1;i<n;++i)
    {
       cout<<parent[i]<<" - "<<i<<"\t\t  "<<key[i]<<"\n";
    }
    cout<<"\nTotal Weight = "<<wt_sum;
    return 0;
}
